import { Technology } from '../types';

// Расширенные данные для ключевых технологий с подробными описаниями и совместимостью
export const extendedTechnologies: Partial<Record<string, Partial<Technology>>> = {
  ts: {
    detailedDescription: `TypeScript - это надстройка над JavaScript, добавляющая статическую типизацию. 
    
**Для начинающих:** Представьте, что JavaScript - это свободная форма письма, а TypeScript - это та же свобода, но с правилами орфографии и пунктуации. TypeScript помогает отлавливать ошибки ЕЩЁ ДО запуска программы.

**Как работает:** Вы пишете код на TypeScript, указывая типы данных (строка, число, объект и т.д.). Компилятор проверяет, что вы не пытаетесь, например, сложить число со строкой. После проверки код превращается в обычный JavaScript.

**Почему важно:** В больших проектах легко допустить ошибку - передать не тот тип данных в функцию. TypeScript ловит такие ошибки автоматически, экономя часы отладки.`,
    compatibility: {
      preferred: ['react', 'node', 'nestjs', 'angular'],
      compatible: ['vue', 'express', 'mongodb', 'postgresql'],
      incompatible: [],
    },
  },

  js: {
    detailedDescription: `JavaScript - язык программирования, который делает веб-страницы интерактивными.

**Для начинающих:** Если HTML - это скелет веб-страницы, а CSS - её внешний вид, то JavaScript - это мозг и мышцы. Он отвечает за всё, что двигается, кликается и реагирует на действия пользователя.

**История:** Создан в 1995 году за 10 дней! Но с тех пор вырос в мощнейший язык, используемый миллионами разработчиков.

**Где используется:** Везде! В браузерах, на серверах (Node.js), в мобильных приложениях, даже в роботах и IoT устройствах.

**Первый шаг:** JavaScript прост в освоении. Можно открыть консоль браузера (F12) и сразу начать писать код!`,
    compatibility: {
      preferred: ['node', 'react', 'vue', 'express', 'mongodb'],
      compatible: ['angular', 'nestjs', 'postgresql', 'redis'],
      incompatible: [],
    },
  },

  react: {
    detailedDescription: `React - библиотека для создания пользовательских интерфейсов, разработанная Facebook.

**Для начинающих:** Представьте конструктор LEGO. React позволяет создавать маленькие "кирпичики" (компоненты) - кнопку, форму, список - и собирать из них целые приложения.

**Ключевая идея:** Компонентный подход. Вместо одной огромной страницы вы создаёте множество маленьких, переиспользуемых частей. Изменилась кнопка? Изменится везде, где она используется!

**Виртуальный DOM:** React не перерисовывает всю страницу при изменении. Он умно обновляет только то, что изменилось. Это делает приложения быстрыми.

**Популярность:** Используется в Facebook, Instagram, Netflix, WhatsApp Web. Огромное сообщество и море готовых решений.`,
    compatibility: {
      preferred: ['ts', 'js', 'rest', 'graphql'],
      compatible: ['node', 'express', 'nestjs', 'mongodb', 'postgresql'],
      incompatible: ['vue', 'angular'], // Конфликт фреймворков
    },
  },

  vue: {
    detailedDescription: `Vue.js - прогрессивный JavaScript-фреймворк для создания пользовательских интерфейсов.

**Для начинающих:** Vue - это как React, но проще и дружелюбнее. Идеален для новичков! Можно начать с простой страницы и постепенно расширять функциональность.

**Философия:** "Прогрессивный" означает, что можно использовать только нужные части. Нужна только реактивность? Используйте минимальный Vue. Нужно полноценное приложение? Добавляйте роутинг, управление состоянием и т.д.

**Синтаксис:** Очень похож на обычный HTML. Директивы v-if, v-for делают код читаемым даже для тех, кто не знает JavaScript глубоко.

**Сообщество:** Отличная документация на русском языке! Дружелюбное комьюнити. Создатель Evan You лично отвечает на вопросы.`,
    compatibility: {
      preferred: ['ts', 'js', 'rest'],
      compatible: ['node', 'express', 'nestjs', 'mongodb', 'postgresql'],
      incompatible: ['react', 'angular'],
    },
  },

  angular: {
    compatibility: {
      preferred: ['ts'],
      compatible: ['rest', 'graphql', 'node', 'nestjs', 'postgresql'],
      incompatible: ['js', 'react', 'vue'], // Требует TypeScript
    },
  },

  svelte: {
    compatibility: {
      preferred: ['ts', 'js'],
      compatible: ['rest', 'node', 'express', 'postgresql', 'mongodb'],
      incompatible: ['react', 'vue', 'angular'],
    },
  },

  express: {
    compatibility: {
      preferred: ['js', 'ts', 'node'],
      compatible: ['mongodb', 'postgresql', 'redis', 'rest', 'graphql'],
      incompatible: ['python', 'java', 'go'],
    },
  },

  django: {
    compatibility: {
      preferred: ['python', 'postgresql', 'rest'],
      compatible: ['redis', 'mongodb', 'mysql'],
      incompatible: ['js', 'ts', 'node'],
    },
  },

  fastapi: {
    compatibility: {
      preferred: ['python', 'postgresql', 'mongodb'],
      compatible: ['rest', 'graphql', 'redis'],
      incompatible: ['js', 'ts', 'node'],
    },
  },

  spring: {
    compatibility: {
      preferred: ['java', 'postgresql', 'mysql'],
      compatible: ['mongodb', 'redis', 'rest', 'microservices'],
      incompatible: ['js', 'ts', 'python'],
    },
  },

  node: {
    detailedDescription: `Node.js - среда выполнения JavaScript на сервере.

**Для начинающих:** Обычно JavaScript работает только в браузере. Node.js позволяет запускать JavaScript на сервере! Это значит, что можно использовать один язык и для фронтенда, и для бэкенда.

**Как это работает:** Node.js использует движок V8 от Google Chrome. Он берёт ваш JavaScript код и выполняет его вне браузера - на сервере, вашем компьютере, где угодно!

**Асинхронность:** Node.js отлично подходит для задач с множеством одновременных операций (чат, стриминг, API). Он не ждёт завершения одной задачи, чтобы начать другую.

**NPM:** Вместе с Node приходит npm - огромнейшая библиотека готовых решений. Нужна работа с базой данных? Есть пакет. Нужна аутентификация? Есть пакет!`,
    compatibility: {
      preferred: ['js', 'ts', 'express', 'nestjs', 'mongodb', 'postgresql'],
      compatible: ['react', 'vue', 'redis', 'docker'],
      incompatible: ['python', 'java', 'go'], // Разные runtime
    },
  },

  nestjs: {
    detailedDescription: `NestJS - прогрессивный Node.js фреймворк для создания эффективных и масштабируемых серверных приложений.

**Для начинающих:** Если Express - это минимализм, то NestJS - это полноценный фреймворк с архитектурой. Он учит правильным паттернам проектирования.

**Архитектура:** Основан на концепциях Angular. Использует декораторы, dependency injection, модули. Звучит сложно? Зато код получается структурированным и легко поддерживаемым!

**TypeScript:** NestJS создан для TypeScript. Строгая типизация на всех уровнях - от контроллеров до сервисов.

**Из коробки:** Поддержка GraphQL, WebSockets, микросервисов, валидация, swagger-документация. Всё, что нужно для enterprise-приложений.

**Когда использовать:** Идеален для больших команд и долгосрочных проектов. Стоит потратить время на изучение - окупится структурой и скоростью разработки.`,
    compatibility: {
      preferred: ['ts', 'node', 'postgresql', 'mongodb', 'graphql', 'rest'],
      compatible: ['react', 'vue', 'angular', 'redis', 'docker', 'kubernetes'],
      incompatible: ['js'], // Требует TypeScript
    },
  },

  postgresql: {
    detailedDescription: `PostgreSQL - мощная реляционная база данных с открытым исходным кодом.

**Для начинающих:** База данных - это организованное хранилище информации. PostgreSQL - это как огромная таблица Excel, но гораздо мощнее и надёжнее.

**Реляционная модель:** Данные хранятся в таблицах со связями. Например, таблица "Пользователи" связана с таблицей "Заказы". Каждый пользователь может иметь много заказов.

**SQL:** Язык запросов. Вместо "дай мне всех пользователей старше 18" вы пишете: SELECT * FROM users WHERE age > 18. Читается почти как английский!

**ACID:** Гарантии надёжности. Если банк переводит деньги, операция либо полностью выполнится, либо полностью откатится. Не будет ситуации "деньги списались, но не пришли".

**Фичи:** JSON поддержка, полнотекстовый поиск, расширения, триггеры. Один из самых функциональных в мире БД.`,
    compatibility: {
      preferred: ['node', 'nestjs', 'django', 'rest'],
      compatible: ['ts', 'js', 'python', 'java', 'go', 'docker'],
      incompatible: [],
    },
  },

  mongodb: {
    detailedDescription: `MongoDB - NoSQL база данных, хранящая данные в формате документов (JSON).

**Для начинающих:** В отличие от PostgreSQL с таблицами, MongoDB хранит данные как JSON-объекты. Это гибко и естественно для JavaScript-разработчиков.

**Документная модель:** Вместо строк и столбцов - документы. Пользователь со всеми его данными (имя, email, заказы) может быть одним документом.

**Схема не требуется:** Не нужно заранее определять структуру. Один пользователь может иметь поле "телефон", другой - нет. Гибкость!

**Когда использовать:** Идеальна для быстрого прототипирования, стартапов, проектов где структура данных часто меняется.

**Масштабирование:** Легко распределяется по множеству серверов (шардинг). Огромные объёмы данных - не проблема.

**Внимание:** Жертвует некоторыми гарантиями ради скорости и гибкости. Не для банков и финансов!`,
    compatibility: {
      preferred: ['node', 'js', 'ts', 'express', 'nestjs', 'graphql'],
      compatible: ['react', 'vue', 'python', 'docker'],
      incompatible: [],
    },
  },

  redis: {
    detailedDescription: `Redis - сверхбыстрое in-memory хранилище данных типа ключ-значение.

**Для начинающих:** Представьте словарь: слово (ключ) → определение (значение). Redis хранит всё в оперативной памяти, поэтому работает МГНОВЕННО.

**Применение:** Кеширование (сохранение часто используемых данных), сессии пользователей, очереди задач, real-time аналитика.

**Пример:** Вместо того чтобы каждый раз запрашивать список товаров из PostgreSQL (медленно), сохраните его в Redis. Запросы станут в 100+ раз быстрее!

**Структуры данных:** Не только строки! Поддерживает списки, множества, хеш-таблицы, отсортированные множества.

**Ограничения:** Всё в памяти = ограничен размером RAM. Не для хранения терабайтов данных. Используется как дополнение к основной БД.`,
    compatibility: {
      preferred: ['node', 'postgresql', 'mongodb', 'mysql'],
      compatible: ['ts', 'js', 'python', 'java', 'go', 'docker'],
      incompatible: [],
    },
  },

  docker: {
    detailedDescription: `Docker - платформа для контейнеризации приложений.

**Для начинающих:** "У меня работает, а у тебя нет" - знакомая проблема? Docker решает её! Он упаковывает приложение со всеми зависимостями в "контейнер".

**Контейнер vs Виртуальная машина:** Контейнер легче и быстрее. VM включает целую операционную систему, контейнер - только нужное приложение.

**Dockerfile:** Рецепт для создания контейнера. "Возьми Ubuntu, установи Node.js, скопируй мой код, запусти сервер". Всё автоматически!

**Преимущества:**
- Одинаковая работа на всех компьютерах
- Легко масштабировать (запустить 10 копий приложения)
- Изоляция (сбой одного контейнера не влияет на другие)

**Популярность:** Стандарт в современной разработке. DevOps без Docker немыслим.`,
    compatibility: {
      preferred: ['kubernetes', 'nginx', 'node', 'postgresql', 'mongodb', 'redis'],
      compatible: ['любая технология!'],
      incompatible: [],
    },
  },

  rest: {
    detailedDescription: `REST API - архитектурный стиль для создания веб-сервисов.

**Для начинающих:** API - это способ общения между программами. REST - это набор правил, КАК программы должны общаться.

**Принципы:**
- Используй HTTP методы: GET (получить), POST (создать), PUT (обновить), DELETE (удалить)
- URL = ресурсы: /users, /posts, /comments
- Без состояния: каждый запрос независим

**Пример:** 
- GET /users/123 - получить пользователя с ID 123
- POST /users - создать нового пользователя
- DELETE /users/123 - удалить пользователя

**Почему популярен:** Простой, понятный, работает везде. Любой язык программирования может работать с REST.

**Формат данных:** Обычно JSON. Легко читается и людьми, и машинами.`,
    compatibility: {
      preferred: ['node', 'express', 'nestjs', 'postgresql', 'mongodb'],
      compatible: ['react', 'vue', 'angular', 'python', 'java'],
      incompatible: ['graphql'], // Альтернативные подходы
    },
  },

  graphql: {
    detailedDescription: `GraphQL - язык запросов для API, созданный Facebook.

**Для начинающих:** В REST вы получаете то, что сервер решил отдать. В GraphQL ВЫ решаете, какие данные нужны.

**Проблема REST:** Запросили пользователя - получили ВСЁ (имя, email, адрес, друзей...). Нужно только имя? Всё равно получите всё (overfetching). Нужны ещё и посты? Делайте второй запрос (underfetching).

**Решение GraphQL:** Один запрос, точные данные:
\`\`\`
{
  user(id: 123) {
    name
    posts {
      title
    }
  }
}
\`\`\`
Получите только имя и заголовки постов. Ничего лишнего!

**Типизация:** Схема описывает все возможности API. Автодополнение и проверка ошибок работают автоматически!

**Когда использовать:** Сложные приложения с множеством связанных данных. Мобильные приложения (экономия трафика).`,
    compatibility: {
      preferred: ['node', 'nestjs', 'mongodb', 'react', 'vue'],
      compatible: ['postgresql', 'ts', 'js', 'python'],
      incompatible: ['rest'], // Альтернативные подходы
    },
  },
};

