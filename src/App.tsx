import { useState } from 'react';
import * as React from 'react';
import { motion } from 'framer-motion';
import { AppSchema, AppMetrics, Technology } from './types';
import FrontendView from './components/FrontendView';
import BackendView from './components/BackendView';
import MetricsPanel from './components/MetricsPanel';
import TechnologyPicker from './components/TechnologyPicker';
import { calculateAdvancedMetrics } from './utils/advanced-metrics';
import { calculateAutoPosition } from './utils/auto-layout';
import './App.css';
import './components/styles.css';
import './components/picker-detail-styles.css';

function App() {
  const [appSchema, setAppSchema] = useState<AppSchema>({
    frontend: [],
    backend: [],
  });
  const [activeView, setActiveView] = useState<'frontend' | 'backend'>('frontend');
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [showPicker, setShowPicker] = useState(false);
  const [pickerPosition, setPickerPosition] = useState({ x: 0, y: 0, clickX: 0, clickY: 0 });

  const metrics = calculateAdvancedMetrics(appSchema);

  const handleAddPanel = (tech: Technology, x: number, y: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const existingTechOfCategory = appSchema[activeView].find(
      p => p.technology.category === tech.category
    );

    if (existingTechOfCategory) {
      const categoryNames: Record<string, string> = {
        language: '—è–∑—ã–∫',
        framework: '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫',
        pattern: '–ø–∞—Ç—Ç–µ—Ä–Ω',
        library: '–±–∏–±–ª–∏–æ—Ç–µ–∫—É',
        database: '–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        service: '—Å–µ—Ä–≤–∏—Å',
      };
      const categoryName = categoryNames[tech.category] || tech.category;
      alert(`–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω ${categoryName}. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ "${existingTechOfCategory.technology.name}".`);
      setShowPicker(false);
      return;
    }

    // –ê–í–¢–û–ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º x, y –æ—Ç –∫–ª–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    const autoPosition = calculateAutoPosition(appSchema[activeView], activeView);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –¥–ª—è —Å–≤—è–∑–∏
    const lastPanel = appSchema[activeView][appSchema[activeView].length - 1];
    
    const newPanel = {
      id: `${Date.now()}-${Math.random()}`,
      technology: tech,
      x: autoPosition.x,
      y: autoPosition.y,
      connections: lastPanel ? [lastPanel.id] : [], // –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    };

    setAppSchema(prev => ({
      ...prev,
      [activeView]: [...prev[activeView], newPanel],
    }));
    
    setShowPicker(false);
  };

  const handleRemovePanel = (panelId: string) => {
    setAppSchema(prev => {
      const updated = {
        ...prev,
        [activeView]: prev[activeView].filter(p => p.id !== panelId),
      };
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ –º–µ—à–∞–µ—Ç)
      // const reorganized = reorganizePanels(updated[activeView]);
      // return { ...updated, [activeView]: reorganized };
      return updated;
    });
  };

  const handleUpdatePanelPosition = (panelId: string, x: number, y: number) => {
    setAppSchema(prev => ({
      ...prev,
      [activeView]: prev[activeView].map(p => 
        p.id === panelId ? { ...p, x, y } : p
      ),
    }));
  };

  const handleClearAll = () => {
    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ${activeView === 'frontend' ? 'Frontend' : 'Backend'}?`)) {
      setAppSchema(prev => ({
        ...prev,
        [activeView]: [],
      }));
    }
  };

  const openPicker = (e: React.MouseEvent) => {
    e.stopPropagation();
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ view-wrapper
    const viewWrapper = (e.currentTarget as HTMLElement).closest('.view-wrapper');
    if (!viewWrapper) return;
    
    const rect = viewWrapper.getBoundingClientRect();
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const scrollLeft = viewWrapper.scrollLeft || 0;
    const scrollTop = viewWrapper.scrollTop || 0;
    
    const clickX = e.clientX - rect.left + scrollLeft;
    const clickY = e.clientY - rect.top + scrollTop;
    
    setPickerPosition({ 
      x: window.innerWidth / 2, // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è picker'–∞
      y: window.innerHeight / 2,
      clickX, // –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
      clickY,
    });
    setShowPicker(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ picker –ø–æ Escape
  React.useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && showPicker) {
        setShowPicker(false);
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showPicker]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  React.useEffect(() => {
    localStorage.setItem('appSchema', JSON.stringify(appSchema));
  }, [appSchema]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  React.useEffect(() => {
    const saved = localStorage.getItem('appSchema');
    if (saved) {
      try {
        setAppSchema(JSON.parse(saved));
      } catch (e) {
        console.error('Failed to load saved schema:', e);
      }
    }
  }, []);

  return (
    <div className="app">

      <div className="app-content">
        {/* –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–ø–µ—Ä—å –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
        <div className="view-switcher">
          <motion.div 
            className="active-indicator"
            animate={{
              x: activeView === 'frontend' ? 0 : '100%',
            }}
            transition={{
              type: "spring",
              stiffness: 300,
              damping: 30
            }}
          />
          <button
            className={`switch-btn ${activeView === 'frontend' ? 'active' : ''}`}
            onClick={() => {
              if (activeView !== 'frontend') {
                setIsTransitioning(true);
                setTimeout(() => {
                  setActiveView('frontend');
                  setIsTransitioning(false);
                }, 150);
              }
            }}
          >
            <span className="switch-btn-title">Frontend</span>
            <span className="switch-btn-subtitle">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å</span>
          </button>
          <button
            className={`switch-btn ${activeView === 'backend' ? 'active' : ''}`}
            onClick={() => {
              if (activeView !== 'backend') {
                setIsTransitioning(true);
                setTimeout(() => {
                  setActiveView('backend');
                  setIsTransitioning(false);
                }, 150);
              }
            }}
          >
            <span className="switch-btn-title">Backend</span>
            <span className="switch-btn-subtitle">–°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å</span>
          </button>
        </div>

        {appSchema[activeView].length > 0 && (
          <button className="clear-btn" onClick={handleClearAll} title="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ö–µ–º—É" style={{
            position: 'absolute',
            top: '20px',
            right: '20px',
            zIndex: 10
          }}>
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        )}

        <div className="view-container">
          {activeView === 'frontend' ? (
            <FrontendView
              panels={appSchema.frontend}
              onAddPanel={handleAddPanel}
              onAddClick={openPicker}
              onRemovePanel={handleRemovePanel}
              onUpdatePosition={handleUpdatePanelPosition}
            />
          ) : (
            <BackendView
              panels={appSchema.backend}
              onAddPanel={handleAddPanel}
              onAddClick={openPicker}
              onRemovePanel={handleRemovePanel}
              onUpdatePosition={handleUpdatePanelPosition}
            />
          )}
        </div>

        <MetricsPanel metrics={metrics} />

        {showPicker && (
          <TechnologyPicker
            position={pickerPosition}
            onSelect={tech => {
              // –ê–í–¢–û–ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, –ø–∞–Ω–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—Å—è
              handleAddPanel(tech, 0, 0);
            }}
            onClose={() => setShowPicker(false)}
            appSchema={appSchema}
          />
        )}
      </div>
    </div>
  );
}

export default App;

